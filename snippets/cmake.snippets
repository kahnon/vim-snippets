snippet cmake
	cmake_minimum_required(VERSION 3.11...3.17)

	#project description
	project(${1:project_name}
	  VERSION 0.1
	  DESCRIPTION "Project description"
	  LANGUAGES CXX
	)

	#prevent in-source builds
	if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
	    message(FATAL_ERROR "In-source builds not allowed. Use -B option for out-of-source build.")
	endif()

	#put all executables and libraries into a directory
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

	set( CMAKE_BUILD_TYPE DEBUG )
	option( USE_ADDRESS_SANITIZER ON )

	set( CMAKE_CXX_STANDARD 20 )
	set( CMAKE_CXX_FLAGS "-fopenmp -Wall -pedantic-errors -march=native -pipe" )
	set( CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-exceptions -fno-rtti -DNDEBUG" )
	set( CMAKE_CXX_FLAGS_DEBUG "-Og -D_GLIBCXX_ASSERTIONS -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC" )

	if ( ${USE_ADDRESS_SANITIZER} )
	  set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address" )
	endif()

	add_executable(bin_$1 main.cpp)
	#target_include_directories( bin_$1 )
	#target_link_libraries( bin_$1 )

snippet append "append something to a variable" 
	set(${1} "${$1} ${2:}")

snippet find_mpi "find mpi"
	find_package( MPI REQUIRED )
	if( MPI_FOUND )
	  include_directories(${MPI_INCLUDE_PATH})
	  target_link_libraries(hello ${MPI_LIBRARIES})
	endif()


snippet find_cuda "find cuda" 
	find_package(CUDA REQUIRED)
	if(CUDA_FOUND)
	  include(FindCUDA)
	  set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} " ) 
	  #CUDA_INCLUDE_DIRECTORIES()
	endif()

snippet glob
	file(GLOB ${1:SRCS} *.${0:cpp})

snippet min
	cmake_minimum_required(VERSION ${0:2.8.2})

snippet include
	include_directories(${${0:include_dir}})

snippet find
	find_package(${1:library} ${0:REQUIRED})

snippet glob
	file(glob ${1:srcs} *.${0:cpp})

snippet subdir
	add_subdirectory(${0:src})

snippet lib
	add_library(${1:lib} ${2:STATIC} ${${0:SRCS}})

snippet link
	target_link_libraries(${1:bin} ${0:somelib})

snippet bin
	add_executable(${1:bin})

snippet set
	set(${1:var} ${0:val})

snippet dep
	add_dependencies(${1:target} ${0:dep})

snippet Ext_url
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
	  URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
	  URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
	  SOURCE_DIR "${4:${CMAKE_BINARY_DIR}/gtest-src}"
	  BINARY_DIR "${0:${CMAKE_BINARY_DIR}/gtest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)

snippet Ext_git
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
	  GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}
	  GIT_TAG           ${3:master}
	  SOURCE_DIR        "${4:${CMAKE_BINARY_DIR}/googletest-src}"
	  BINARY_DIR        "${0:${CMAKE_BINARY_DIR}/googletest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)

snippet props
	set_target_properties(${1:target}
	    ${2:PROPERTIES} ${3:COMPILE_FLAGS}
	    ${0:"-O3 -Wall -pedantic"}
	)

snippet fetch
	FetchContent_Declare(
	  ${1:ContentName}
	  GIT_REPOSITORY ${2:ContentRepository}
	  GIT_TAG ${3:Version}
	)
	FetchContent_MakeAvailable($1)

snippet test
	add_test(${1:ATestName} ${0:testCommand --options})
